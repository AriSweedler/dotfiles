#!/usr/bin/env python3

import argparse, sys, math

def myParse():
    # initialize parser object
    parser = argparse.ArgumentParser(description='Make a pretty divider for code')

    # generic arguments
    parser.add_argument('-w', '--width', type=int, metavar='COLUMNS')
    parser.add_argument('string', nargs='*')

    # relevant syntaxes
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('-c', '--cpp', action='store_true', help='set comment style to C: /* * */ (this is the default)')
    #
    group.add_argument('-p', '--python', action='store_true', help='set comment style to python: #')
    group.add_argument('-t', '--text', action='store_true', help='set comment style to text: #')
    group.add_argument('-s', '--shell', action='store_true', help='set comment style to shell: #')
    group.add_argument('-b', '--bash', action='store_true', help='set comment style to bash: #')
    #
    group.add_argument('-v', '--vim', action='store_true', help='set comment style to vim: "')
    #
    group.add_argument('-d', '--dashes', action='store_true', help='set comment style to dashes: -')

    # set defaults
    parser.set_defaults(width=80, string='', indent=0)

    # return parsed arguments
    return parser.parse_args(sys.argv[1:])

# figure what the commend start/middle/end are
def get_comment_template(args):
    start, middle, end = "", "", ""
    if args.cpp:
        start, middle, end = "/*", "*", "*/"
    elif args.python or args.shell or args.bash or args.text:
        middle = "#"
    elif args.vim:
        middle = "\""
    elif args.dashes:
        middle = "-"
        args.width = 67
    else:
        start, middle, end = "/*", "*", "*/"

    length = args.width - (len(start)+len(end))
    return start, middle*length, end

def main():
    args = myParse()
    start, middle, end = get_comment_template(args)

    if args.string:
        args.string = ' ' + ' '.join(args.string) + ' '

    # Figure where to emplace the user string into the comment
    pad = len(middle) - len(args.string)
    if (pad < 0):
        print("String is longer than comment. TODO support multiline (box) comments")
        sys.exit(1)
    elif (pad == 0):
        middle = args.string
    else:
        lpad = math.floor(pad/2)
        rpad = pad - lpad
        middle = middle[0:lpad] + args.string + middle[-1*rpad:]

    print(start + middle + end)

if __name__== "__main__":
    main()
