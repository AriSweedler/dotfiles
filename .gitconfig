# This is Git's per-user configuration file.
[user]
	name = Ari Sweedler
	email = ari@sweedler.com
	username = arisweedler

[core]
	excludesfile = ~/.local/git/ignore
	editor = vim

[init]
	templatedir = ~/.local/git/template
	defaultBranch = main

[diff]
	tool = diffconflicts
	submodule = diff

[merge]
	tool = diffconflicts

[status]
	submoduleSummary = true

[mergetool "diffconflicts"]
	cmd = vim -c DiffConflicts \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
	trustExitCode = true

[mergetool]
	# After performing a merge, the original file with conflict markers can
	# be saved as a file with a .orig extension. I do not want that
	keepBackup = false

[pull]
	ff = only

[stash]
	showPatch = true

[interactive]
	singleKey = true

################################## aesthetics ##################################
[color "branch"]
	current = red reverse
	local = blue
	remote = green

[color "diff"]
	meta = yellow black bold
	frag = magenta black bold
	old = red bold
	new = green bold
	plain = white

[color "status"]
	added = green black bold
	changed = yellow black bold
	untracked = red reverse bold

[pretty]
	# '%h': abbreviated commit hash
	# '%ar': author date, relative
	# '%D': ref names without the " (", ")" wrapping.
	# '%s': subject
	# '%an': author name
	newlog = "format:%C(cyan)%h %C(green)%<(12,trunc)%ar %C(dim white)%<(12,trunc)[%an] %C(reset)%s %w(0,0,8)%C(bold red)%+d%C(reset)"

################################### shortcuts ##################################
[alias]
	a = !"git add .; git s"
	alias = !"git config --list | grep ^alias | cut -c 7- | sort #"
	amend = commit --amend --reuse-message=HEAD
	ari = grep --break --heading --line-number "\\\\[ARI\\\\]"
	cconfig = config --edit --global
	ctags = !.git/hooks/ctags
	d = diff --staged --diff-algorithm=minimal
	po = !"git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)"
	diffls = diff --name-only
	diffc = diff HEAD^
	diffsub = submodule foreach git diff
	grepp = grep --break --heading --line-number
	initt = !"git init; git commit --allow-empty --message 'first commit'"
	l = log --pretty=newlog --graph -10
	ll = log --pretty=newlog --graph
	# Just like we can use 'log -S' to search through changes, we can use 'log --grep' to search through commit messages
	logged = ll --all --grep
	ls = ls-tree --full-tree -r --abbrev HEAD
	s = status --short --branch
	showme = !"printf \"The alias '$1' is: \"; git config --list | sed /alias.$1=/!d | sed s/[^=]*=// #"

	# The Jira ticket suite
	ticket = !"git pull origin dev && git switch --create $1 dev && git push --set-upstream origin $1 #"
	scar = !"git ticket scartissue/$1"
	bug = !"git ticket bugfix/$1"
	feature = !"git ticket feature/$1"
	experiment = !"git ticket ari/$1"
