# This is Git's per-user configuration file.
[user]
	name = Ari Sweedler
	email = ari@sweedler.com
	username = ari.sweedler

[core]
	excludesfile = ~/.config/git/ignore
	editor = nvim

[init]
	templatedir = ~/.config/git/template
	defaultBranch = main

[diff]
	submodule = diff

[merge]
	tool = vim_mergetool
	conflictStyle=diff3

[mergetool "vim_mergetool"]
	cmd = nvim -f -c "MergetoolStart" "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
	trustExitCode = true

[mergetool]
	# After performing a merge, the original file with conflict markers can
	# be saved as a file with a .orig extension. I do not want that
	keepBackup = false

[pull]
	ff = only

[fetch]
	writeCommitGraph = true

[stash]
	showPatch = true

[interactive]
	singleKey = true

[rerere]
	# Reuse recorded resolution: record hand-resolved results to merge
	# conflicts. To get use of this feature, you have to enable it and then
	# manually invoke 'git rerere' in the following 3 unique situations:
	# * A new merge conflict (REcords the conflicted working tree files)
	# * Resolving the merge conflict (REcords the REsolution)
	# * An old merge conflict (REuses the resolution)
	enabled = true

[rebase]
	# In a normal rebase of branch A onto main, you'll go from this
	#
	#     x(A)-y(B)-main
	#
	# to this
	#
	#     x2(A)-y2-main
	#
	# We lost the ref for B! Because the rebase was only working on the
	# commits, not on the refs that referred to the commits. We would need
	# to manually update the branch (B) to point to y2. With the
	# 'updateRefs' option turned on, git will update the refs for you and
	# we'll get
	#
	#     x2(A)-y2(B)-main
	#
	# Ofc, origin/B can no longer fast-forward to B, but that's ok.
	updateRefs = true
	# You can't rebase with a dirty working tree. You will have to
	# * make a commit (and then git reset --mixed @~)
	# * Or stash rebase unstash.
	# Two ways of spelling the same thing. With this option turned on, git
	# will automatically stash before a rebase and unstash after
	autoStash = true
	autosquash = true

################################## aesthetics ##################################
[color "branch"]
	current = red reverse
	local = blue
	remote = green

[color "diff"]
	meta = yellow black bold
	frag = magenta black bold
	old = red bold
	new = green bold
	plain = white

[color "status"]
	added = green black bold
	changed = yellow black bold
	untracked = red reverse bold

[pretty]
	# https://git-scm.com/docs/pretty-formats
	# %C(color) ::= color directive
	# %<(N,TX) ::= make the next placeholder take at least N columns, truncate according to TX
	# %h ::= abbreviated commit hash
	# %ar ::= author date, relative to now
	# %an ::= author name (compared to committer name)
	# %s ::= subject (first line of commit message)
	# %w(width, indent1, indent2) ::= change linewrap
	# + ::= A linefeed is inserted before the expansion if expansion is not null
	# %d ::= ref names.
	newlog = "format:\
%C(cyan)%<(9,trunc)%h \
%C(green)%<(12,trunc)%ar \
%C(dim white)%<(12,trunc)[%an]%C(reset) \
%C(reset)%s \
%C(bold reverse cyan)%w(0,0,8)%+d\
%C(reset)"
	# TODO the ref names aren't being colored. This looks like a bug.

#################################### aliases ###################################
[alias]
	# Meta-aliases
	alias = !"git config --list | grep ^alias | cut -c 7- | sort #"
	showme = !"printf \"The alias '$1' is: \"; git config --list | sed /alias.$1=/!d | sed s/[^=]*=// #"

	# Shortcuts
	a = !"git add .; git s"
	d = diff --staged --diff-algorithm=minimal
	df = dotfiles
	els = editdiffls
	f = fetch --append --prune --jobs=4
	ff = pull --ff-only
	l = ll -10
	ll = log --pretty=newlog --graph
	po = push-origin
	s = status --short --branch
	sub-u = sub-update
	wb = wipebranch
	yb = yankbranch

	# New commands
	branchlog = !"f() { git_branchlog ; }; f"
	cconfig = config --edit --global
	children = !"f() { git rev-list --all --not $1^@ --children | grep $(git rev-parse $1); }; f" # reachable children of a ref
	contains = !"f() {  git tag --contains $1; git branch --contains $1; }; f"
	ctags = !.git/hooks/ctags
	diffls = diff --name-only
	dotfiles = !"git --git-dir=\"$HOME/dotfiles/\" --work-tree=\"$HOME\""
	# editdiffls: If I could run ']c' upon starup that would be great. Can't figure it out tho
	editdiffls = !"f() { files=$(git diff --name-only $1); [ -n \"$files\" ] && $EDITOR -p $files || echo \"no changes since ref='$1'\" ;}; f"
	history-of = ll --follow --
	ignore = !"f() { echo $1 >> .gitignore; }; f"
	initt = !"git init; git commit --allow-empty --message 'first commit'"
	ls = ls-tree --full-tree -r --abbrev HEAD
	pr = !"f() { browser_pr_for_current_branch_in_pwd_stash ; }; f"
	push-origin = !"git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)"
	wipebranch = !"f() { git branch -D $1; git push origin --delete $1; }; f"
	yankbranch = !"git branch --show-current | tr -d '\n' | tee /dev/tty | pbcopy"

	# jujutsu-inspired syntax
	describe = commit --amend
	amend = commit --amend --reuse-message=HEAD
	patch = add --patch

	# Submodule control
	sub-push = !"f() { git submodule foreach git push && git push; }; f"
	sub-all = submodule foreach git
	# If HEAD is attached (points to a branch), this works nicely. If HEAD
	# is detached then this is a no-op
	sub-ff = submodule foreach git pull --ff-only
	# This command leaves submodules with HEAD pointing to a commit, by
	# default. Not the best. However if git config submodule.branch is set,
	# then HEAD -> commit pointed to by origin/<branch>)
	sub-update = submodule update --remote

	# Searching
	# 'git log -S' to search through changes
	# 'log --grep' to search through commit messages
	grepp = grep --break --heading --line-number
	grep-code = ll -S
	grep-commit = ll --all --grep

# Include computer-specific git configuration. Put this last so we can override
# all of the above
[includeIf "gitdir:~/"]
	path = ~/.local/git/config
