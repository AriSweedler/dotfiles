# This is Git's per-user configuration file.
[user]
	name = Ari Sweedler
	email = ari@sweedler.com
	username = arisweedler

[core]
	excludesfile = ~/.config/git/ignore
	editor = vim

[init]
	templatedir = ~/.config/git/template
	defaultBranch = main

[diff]
	tool = diffconflicts
	submodule = diff

[merge]
	tool = diffconflicts

[status]
	# submoduleSummary = true

[mergetool "diffconflicts"]
	cmd = vim -c DiffConflicts \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
	trustExitCode = true

[mergetool]
	# After performing a merge, the original file with conflict markers can
	# be saved as a file with a .orig extension. I do not want that
	keepBackup = false

[pull]
	ff = only

[stash]
	showPatch = true

[interactive]
	singleKey = true

################################## aesthetics ##################################
[color "branch"]
	current = red reverse
	local = blue
	remote = green

[color "diff"]
	meta = yellow black bold
	frag = magenta black bold
	old = red bold
	new = green bold
	plain = white

[color "status"]
	added = green black bold
	changed = yellow black bold
	untracked = red reverse bold

[pretty]
	# https://git-scm.com/docs/pretty-formats
	# %C(color) ::= color directive
	# %<(N,TX) ::= make the next placeholder take at least N columns, truncate according to TX
	# %h ::= abbreviated commit hash
	# %ar ::= author date, relative to now
	# %an ::= author name (compared to committer name)
	# %s ::= subject (first line of commit message)
	# %w(width, indent1, indent2) ::= change linewrap
	# + ::= A linefeed is inserted before the expansion if expansion is not null
	# %d ::= ref names.
	newlog = "format:\
%C(cyan)%<(9,trunc)%h \
%C(green)%<(12,trunc)%ar \
%C(dim white)%<(12,trunc)[%an]%C(reset) \
%C(reset)%s \
%C(bold reverse cyan)%w(0,0,8)%+d\
%C(reset)"
	# TODO the ref names aren't being colored. This looks like a bug.

#################################### aliases ###################################
[alias]
	# Meta-aliases
	alias = !"git config --list | grep ^alias | cut -c 7- | sort #"
	showme = !"printf \"The alias '$1' is: \"; git config --list | sed /alias.$1=/!d | sed s/[^=]*=// #"

	# Shortcuts
	a = !"git add .; git s"
	d = diff --staged --diff-algorithm=minimal
	f = fetch --append --prune --jobs=4
	ff = pull --ff-only
	ll = log --pretty=newlog --graph
	l = ll -10
	s = status --short --branch
	sw = switch
	po = !"git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)"
	rc = rebase --continue
	m = mergetool
	yb = yankbranch
	sb = branch --show-current
	cp = cherry-pick

	# New commands
	amend = commit --amend --reuse-message=HEAD
	cconfig = config --edit --global
	ctags = !.git/hooks/ctags
	dh = diff HEAD^
	diffls = diff --name-only
	initt = !"git init; git commit --allow-empty --message 'first commit'"
	ls = ls-tree --full-tree -r --abbrev HEAD
	patch = add --patch
	yankbranch = !"git branch --show-current | tr -d '\n' | tee /dev/tty | pbcopy"
	children = !"f() { git rev-list --all --not $1^@ --children | grep $(git rev-parse $1); }; f" # reachable children of a ref
	history-of = ll --follow --

	# Submodule control
	sub = submodule
	sub-all = submodule foreach git
	# HEAD --> commit (If git config submodule.branch is set, then HEAD -> commit pointed to by origin/<branch>)
	sub-u = submodule update --remote
	# If HEAD --> branch, this works nicely
	subff = submodule foreach git pull --ff-only

	# Searching
	# 'git log -S' to search through changes
	# 'log --grep' to search through commit messages
	grepp = grep --break --heading --line-number
	ari = grepp "\\\\[ARI\\\\]"
	grep-code = ll -S
	grep-commit = ll --all --grep

	# The Jira ticket suite
	j-bug = !"git j-ticket bugfix/$1"
	j-experiment = !"git j-ticket ari/$1"
	j-feature = !"git j-ticket feature/$1"
	j-scar = !"git j-ticket scartissue/$1"
	j-ticket = !"git f && git switch --create $1 origin/dev && git po #"
