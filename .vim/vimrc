" My plugin manager of choice - if vim's new builtin package was this easy
" I'd switch over to that. But it doesn't seem to be as easy.
execute pathogen#infect()

"""""""""""""""""""""""""""""""""" settings """"""""""""""""""""""""""""""""""
filetype plugin on    "allow for autocmds to be run based on filetype
colorscheme desert    "pretty colors
set display=lastline  "as much as possible of the last line will be displayed
set gdefault          "turn global flag on by default for :substitute
set history=1000      "the default is only 40.
set nocompatible      "idk what this does specifically. Setting it sucks tho
set number            "turn on line numbers
set showcmd           "multi-keystroke commands will be shown in bottom right.
set noshowmode        "don't show the mode (we use airline now!)
set noerrorbells      "disable error bells
set belloff=all       "disable bell for non-errors, too
set lazyredraw        "don't update the screen when doing macros
set updatetime=100    "let vim-gitgutter update faster
set scrolloff=7       "Deafult to giving me a lil more space to see context

" Don't timeout on mappings. DO timeout after 100 ms on escape codes
set notimeout ttimeout ttimeoutlen=100

"allow backspacing over more things
set backspace=indent,eol,start

" Nicer <Tab>'ing in command mode.
" Select the dummy 0th item to remove text from the most recent completion
set wildmenu
set wildmode=full

" TODO make a keymapping that enters the current dir and doesn't select the
" first item. Why doesn't this work!? Ask StackOverflow I guess
" cnoremap <Down> <Down><Left>

" ctags is so helpful! And easy, too.
set tags+=tags;

" Toggle 'list' to show whitespace characters
set listchars=tab:X-,space:.,eol:$,

""""""""""""""""""""""""""""""""" popup menu """""""""""""""""""""""""""""""""
" show a popup menu for completion even if there's only 1 option
set completeopt=menuone,preview
" max popup menu height is 8
set pumheight=8

""""""""""""""""""""""""""""""""" whitespace """""""""""""""""""""""""""""""""
" remove trailing whitespace upon saving or upon hitting <Leader>w
function! RemoveTrailingWhitespace()
  %substitute/\s\+$//e
endfunction
nnoremap <silent> <Leader>w :call RemoveTrailingWhitespace()<CR>

" highlight trailing whitespace
highlight trailing_whitespace ctermbg=red
match trailing_whitespace /\s\+$/

"""""""""""""""""""""""""""""""" pretty colors """""""""""""""""""""""""""""""
" Look at colors: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim

"allow for syntax highlighting and indenting
syntax on

"highlight search
set hlsearch

"incremental search - show where hitting enter WOULD place you
set incsearch

"briefly show the matching bracket {[( when typing )]}
set showmatch matchtime=3

" Use colorcolumn to display the textwidth
let &colorcolumn=(&textwidth)?&textwidth:80
highlight ColorColumn ctermbg=233

" Easily update textwidth and colorcolumn at the same time
nnoremap <silent> <Leader>tw :<C-u>call ChangeTextWidth(v:count)<CR>
function! ChangeTextWidth(width)
  " If we have a v:count, then set the textwidth.
  if a:width
    let &textwidth=(a:width)
  fi
  " match the colorcolumn to the textwidth
  let &colorcolumn=(&textwidth)
endfunction

"""""""""""""""""""""""""""""""" abbreviations """""""""""""""""""""""""""""""
"""""""""""" easy hashbangs """"""""""""
iabbrev #!b #!/bin/bash
iabbrev #!p #!/usr/bin/env python3

"""""""""""""""""""""""""""""""" remap macros """"""""""""""""""""""""""""""""
" Shorten these calls to help tmux copy/pasting
nnoremap <Leader>[ :GitGutterToggle \| set number!<CR>

" Cute lil macro to insert dividers based on the python script I wrote
function! DoDivider(width)
  " Use v:count. Or else, use textwidth. Or else, use 80
  let l:width = a:width ? a:width : (&textwidth ? &textwidth : 80)
  execute printf("read !divider --filetype %s --width %d %s", &filetype, l:width, shellescape(@", 1))
endfunction
nnoremap <Leader>d :<C-u>call DoDivider(v:count)<CR>
vnoremap <Leader>d y:<C-u>call DoDivider(v:count)<CR>

" easy folds around braces or comments
noremap <Leader>z %zfaB
noremap <Leader>* [*zf]*

" Have Shift-Tab remove one layer of indent in insert or normal
inoremap <S-Tab> <C-d>
nnoremap <S-Tab> <<

" clear highlighting (clear the buffer, or just stop highlighting)
noremap <silent> <Leader>/ :let @/ = ""<CR>
noremap <silent> <C-_> :nohlsearch<CR>

" Help me! Calls help on the word under the cursor
nnoremap <Leader>hh viwy:help <C-r>"<CR>

" Save a file as root (\W)
nnoremap <Leader>WR :w !sudo tee % > /dev/null<CR>

" replace current word with most recently yanked text, preserving buffer
nnoremap <Leader>r viwpyiw

" indent/highlight most recently pasted code
nnoremap <Leader>= `[=`]
nnoremap <Leader>v `[v`]

" use star in visual mode to search for the selected text
" yank into register s --> forward search for the contents of register s
" (Very nomagic, escape contents of s register before pasting)
vnoremap * "sy/\V<C-r>=escape(@s, '/\')<CR><CR>N
nnoremap * *N

" Place whole file in Mac's clipboard
nnoremap <Leader>c mq:%!pbcopy<CR>u`q

" Place highlighted text in Mac's clipboard
vnoremap <Leader>c :!pbcopy<CR>u

" edit ~/.vimrc
nnoremap <Leader>ev :tabe $MYVIMRC<CR>

" source my vimrc/current file - useful for testing
nnoremap <silent> <Leader>sv :source $MYVIMRC<CR>
nnoremap <silent> <Leader>so :source %<CR>

""""""""""""" buffers/tabs """""""""""""
" Remove buffer from memory without closing window
nnoremap <Leader>bd :bnext\|bdelete #<CR>

" "relative" edit. Edit a file without having to cd by using `% (filename) :p
" (full path) :h (dirname)`
map <Leader>ew :edit <C-r>=expand("%:p:h") . "/" <CR>

" easily switch between buffers and tabs
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap gr gT

""""""""""""""" movement """""""""""""""
nnoremap <Up> <C-y>k
nnoremap <Down> <C-e>j
nnoremap b ge
nnoremap B gE

"""""""""""""""" other """"""""""""""""
" TODO figure out if I wanna config netrw... It seems buggy lol. I'll worry
" about this later lol.
" Config for netrw: https://shapeshed.com/vim-netrw/
" Remove the banner
"let g:netrw_banner = 0
" open files in a new tab
"let g:netrw_browse_split = 3

" sessions
nmap <Leader>ss :wa<CR>:mksession! ~/.vim/sessions/
nmap <Leader>sess :wa<CR>:so ~/.vim/sessions/

" enable omnicompletion
set omnifunc=syntaxcomplete#Complete

" Entering a newline in insert mode adds a break in the undo sequence
inoremap <CR> <C-]><C-g>u<CR>

" exit insert mode with 'jk'
inoremap jk <ESC>

"""""""""""""""""""""""""""""""" plugin config """""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""" airline """""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='dark'

"""""""""""""""""""""""""""" git gutter """"""""""""""""""""""""""""
highlight DiffDelete term=bold ctermfg=1
highlight DiffAdd term=bold ctermfg=2
highlight DiffChange term=bold ctermfg=3
