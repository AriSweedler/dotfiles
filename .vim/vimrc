execute pathogen#infect()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TODO write a command that'll let you edit a macro via an ex command, like:
" let @<arg> = "<C-r><arg>"
" Make it a plugin and it'll open a new buffer and when you quit the buffer
" it'll save the buffer's text into the macro thing (make stuff like  and
" <C-m> switch? Idk. That's a future feature.
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TODO
" QUICKFIX SIGN PLUGIN
"
" add a mark to the sign column for every quick fix line entry
" define shortcuts to jump around them
" use sign's 'group' to do it properly
" :help sign.txt is great
"
" How to parse quick fix output? It's pretty straightforward, apparently.
" How to place signs? It's simple, you already learned and you can remember
" easily.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" TODO how do I want to organize my mappings better?
" For fzf (https://github.com/junegunn/fzf): If installed using Homebrew
" set rtp+=/usr/local/opt/fzf

"""""""""""""""""""""""""""""""""" settings """"""""""""""""""""""""""""""""""
filetype plugin on    "allow for autocmds to be run based on filetype
syntax on             "allow for syntax highlighting and indenting
colorscheme desert    "pretty colors
set nocompatible      "Don't do weird stuff for old friends
set number            "turn on line numbers
set formatoptions+=j  "Delete comment character when joining commented lines

" briefly show the matching bracket {[( when typing )]}
set showmatch matchtime=3

" highlight search (highlight matches)
set hlsearch
" incremental search (highlight as we type the search query)
set incsearch
" Clear highlighting for search terms
noremap <silent> <C-_> :nohlsearch<CR>
inoremap <silent> <C-_> <C-o>:nohlsearch<CR>

" allow backspacing over more things
set backspace=indent,eol,start

" Multi-keystroke commands will be shown in bottom right, and they will not
" timeout. Only cancel a partially given command manually (<C-c> or <ESC>)
set showcmd
set notimeout
" DO timeout on escape codes, after 100 ms
set ttimeout ttimeoutlen=100

" Nicer tab'ing in command mode (wild
" 1st tab:         Complete the longest match and bring up 'wildmenu'
" Additional tabs: Cycle through the menu
set wildmenu wildmode=longest:full,full

"""""""""""""""""""""""" Other (less important) settings """""""""""""""""""""""
set display=lastline  "as much as possible of the last line will be displayed
set gdefault          "turn global flag on by default for :substitute
set history=1000      "the default is only 40.
set noshowmode        "don't show the mode (we use airline now!)
set noerrorbells      "disable error bells
set belloff=all       "disable bell for non-errors, too
set lazyredraw        "don't update the screen when doing macros
set updatetime=100    "let vim-gitgutter update faster
set scrolloff=7       "Deafult to giving me a lil more space to see context
set sidescrolloff=4   "Min # of columns to keep to the left/right of the cursor
set splitbelow splitright "new splits open to the bottom or to the right
set autoread          "Autoload file changes. You can undo by pressing u
set pumheight=8       "set max popup menu height to 8
set tags+=tags;       "ctags is so helpful! And easy, too.

""""""""""""""""""""""""""""""""" Whitespace """""""""""""""""""""""""""""""""
"""""""""""""" Get different listchars if it’s supported """""""""""""
if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && version >= 700
  set listchars=tab:•›,space:⋅,eol:¬,nbsp:+,
  set fillchars=vert:\|,fold:\⋅,
  "set showbreak=↪.
  set showbreak=☞\ " "Leave this comment and extra whitespace
else
  set listchars=tab:X-,space:.,eol:$,nbsp:+,
  set fillchars=vert:\|,fold:\~
  set showbreak=->
endif

" Toggle displaying whitespace characters
nnoremap <Leader>l :set list!<CR>

" Toggle on and off: GitGutter, margin numbers, signcolumn
nnoremap <Leader>[ :GitGutterToggle <Bar> set number! <Bar> set signcolumn=<C-r>=&number?"no":"auto"<CR><CR>

" remove trailing whitespace - https://vi.stackexchange.com/questions/454/
function! RemoveTrailingWhitespace(range)
  let save_pos = getpos(".")
  let trailing = '\s\+$'
  execute 'keeppatterns ' . a:range . 'substitute/' . l:trailing . '//e'
  echom 'keeppatterns ' . a:range . 'substitute/' . l:trailing . '//e'
  call setpos('.', save_pos)
endfunction
nnoremap <silent> <Leader>w :call RemoveTrailingWhitespace('%')<CR><C-o>

"""""""""""""""""""""""""""""""" pretty colors """""""""""""""""""""""""""""""
" Toggle syntax highlighting
noremap <Leader>sy :set syntax=<C-r>=&syntax == "OFF" ? "ON" : "OFF"<CR><CR>

" Look at colors: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
" Look at colors: https://github.com/guns/xterm-color-table.vim/blob/master/plugin/xterm-color-table.vim

" Use colorcolumn to display the textwidth
highlight ColorColumn ctermbg=233

" Update textwidth and colorcolumn at the same time
nnoremap <silent> <Leader>tw :<C-u>call ChangeTextWidth(v:count)<CR>
function! ChangeTextWidth(...)
  " If we have a v:count, then set the textwidth.
  if a:0 == 1
    let l:width = a:1
    let &textwidth = (l:width)
  endif

  " match the colorcolumn to the textwidth
  let &colorcolumn = (&textwidth)
endfunction
call ChangeTextWidth()

"""""""""""""""""""""""""""""""" abbreviations """""""""""""""""""""""""""""""
"""""""""""" easy hashbangs """"""""""""
inoreabbrev #!b #!/bin/bash
inoreabbrev #!p #!/usr/bin/env python3
inoreabbrev #!!p #!/usr/bin/env python3<CR><CR>if __name__ == "__main__":<CR>

"""""""""""""""""""""""""""""""""" mappings """"""""""""""""""""""""""""""""""
" One keystroke to strip trailing whitespace on the current line and write
" Works in a lotta modes. See `:help map-modes` for details
" If you want to exit insert mode without writing or stripping trailing
" whitespace, go somwehere else. Or use <C-c> or jk
noremap  <C-f> <ESC>:call RemoveTrailingWhitespace('.')<CR>:w<CR>
noremap! <C-f> <ESC>:call RemoveTrailingWhitespace('.')<CR>:w<CR>

" <C-f> <C-g> will write and exit. Kinda emacs-y lol
nnoremap <C-g> :q<CR>

" When do I ever wanna hit 2 keys to execute one thought. Overwriting these
" isn't an issue as if I wanna operate on a range I can just use visual mode.
nnoremap D dd
nnoremap G Gzz
nnoremap C cc
nnoremap < <<
nnoremap > >>
nnoremap = == =iB

" Jump to the next "TODO"
nnoremap <Leader>to /TODO<CR>

" So cool! Execute currently highlighted text as bash or python
" https://vimways.org/2019/vim-and-the-shell/
vnoremap <Leader>xb !bash<CR>
vnoremap <Leader>xp !python3<CR>

" Easier make (write all before invoking the make command)
nnoremap <Leader>mm :wall<Bar>make!<CR>
nnoremap <Leader>mc :make check<CR>

" If you set :nohlsearch but then source vimrc again, then the highlights will
" reappear. You must clear the @/ register to stop this.
noremap <silent> <Leader>/ :let @/ = ""<CR>

" Help me! Calls help on the word under the cursor
nnoremap <Leader>hh viwy:help <C-r>"<CR>

" replace current word with most recently yanked text, preserving buffer
nnoremap <Leader>r viwpyiw

" indent most recently pasted code
nnoremap <Leader>= `[=`]

" use star in visual mode to search for the selected text
" yank into register s --> forward search for the contents of register s
" (Very nomagic, escape contents of s register before pasting)
vnoremap * "sy/\V<C-r>=escape(@s, '/\')<CR><CR>N
nnoremap * *N

" Place highlighted text/whole file in Mac's clipboard
nnoremap <Leader>c mq:%!pbcopy<CR>u`q
vnoremap <Leader>c :!pbcopy<CR>u

" Paste from Mac's clipboard
nnoremap <Leader>p :set paste<CR>mq:read !pbpaste<ESC>:set nopaste<CR>='q

""""""""""""" buffers/tabs """""""""""""
" Buffer close: remove buffer from memory
nnoremap <Leader>bc :bnext <Bar> bdelete #<CR>
" Remove buffer from memory AND close the window (This is the stronger option so it gets the extra <Leader> prefix)
nnoremap <Leader><Leader>bc :.bdelete<CR>

" easily switch between buffers and tabs
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap gr gT

""""""""""""""" movement """""""""""""""
" Up/Down don't change relative line number
nnoremap <Up> <C-y>k
nnoremap <Down> <C-e>j

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move up/down this virtual column until you hit non-whitespace
nnoremap gK ?\%<C-R>=virtcol(".")<CR>v\S<CR>
nnoremap gJ /\%<C-R>=virtcol(".")<CR>v\S<CR>

""""""""""""""" sessions """""""""""""""
nnoremap <Leader>ss :wa<CR>:mksession! ~/.vim/sessions/
nnoremap <Leader>sess :wa<CR>:so ~/.vim/sessions/

" enable omnicompletion
set omnifunc=syntaxcomplete#Complete
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""" Plugins """"""""""""""""""""""""""""""""""
"TODO Find out the best place to put a 'plugin_conf' folder or something, and
"use that to do all of these config things? Maybe?
"""""""""""""""""""" default plugin load & config """"""""""""""""""""
"TODO update this - make sure I know what tf is actually going on under the
"covers here. I will wanna config matchit (probably per language? Maybe
"globally). Either way, invest time to find out the best way to do that
packadd! matchit
"""""""""""""""""""""" Pathogen plugins: config """"""""""""""""""""""
"""""""""""""""""""""""""" airline """""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#buffer_min_count = 2
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_theme='dark'

""""""""""""""""""""""""" GitGutter """"""""""""""""""""""""
let g:gitgutter_override_sign_column_highlight = 0
if exists('&signcolumn')  " as of Vim 7.4.2201 and later
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif
highlight! link Folded SignColumn

"White sign, colored background colorscheme
highlight SignColumn term=bold ctermbg=234 ctermfg=8
highlight GitGutterDelete term=bold ctermfg=88 ctermbg=88
highlight GitGutterAdd term=bold ctermfg=189 ctermbg=22
highlight GitGutterChange term=bold ctermfg=189 ctermbg=100

let g:gitgutter_sign_added              = '>+'
let g:gitgutter_sign_modified           = '>~'
let g:gitgutter_sign_removed            = '>_'
let g:gitgutter_sign_removed_first_line = '>‾'
let g:gitgutter_sign_modified_removed   = '~_'

"""""""""""""""""""""""""""""""""""" vsnip """""""""""""""""""""""""""""""""""
imap <expr> <Tab> vsnip#available() ? '<Plug>(vsnip-expand-or-jump)' : '<Tab>'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
