#!/bin/bash -e

# The classic log suite
c_red='\e[31m'; c_green='\e[32m'; c_yellow='\e[33m'; c_rst='\e[0m'
preamble() { echo -n "[$(date "+%Y-%m-%dT%T.000Z")] [${FUNCNAME[2]}]" ; }
# shellcheck disable=SC2059
log::err() { printf "$(echo -e "${c_red}[ERROR] $(preamble)${c_rst}" "$@")\n" >&2 ; }
# shellcheck disable=SC2059
log::info() { printf "$(echo -e "${c_green}[INFO] $(preamble)${c_rst}" "$@")\n" >&2 ; }
# shellcheck disable=SC2059
log::warn() { printf "$(echo -e "${c_yellow}[WARN] $(preamble)${c_rst}" "$@")\n" >&2 ; }

# Define globals
readonly root="${NOTE_BASE:-$HOME/Desktop/notes}"
readonly NOTE_BASE="${root?}"
export NOTE_BASE
readonly datekeeper_file="${root?}/.datekeeper"
IFS='|' read -r year month day weekday < <(date '+%Y|%b|%d|%A')
weekday="$(echo "$weekday" | tr '[:upper:]' '[:lower:]')"
readonly git=( "git" "-C" "${root?}" )
readonly ext="md"

function note::from_date() {
  # Arg parsing
  local base="${root?}/"
  if [ "$1" == "--relative" ]; then
    shift 1
    base=""
  fi
  local -r date="$1"

  # Respect changing extensions
  local -r file="$(compgen -G "${base}${date?}.*")"
  if [ ! -f "${file}" ]; then
    # We have to come up with a name for a file that doesn't exist
    echo "${base}${date?}.${ext}"
    return
  fi

  # Be noisy if we've changed recently
  local -r found_ext="${file##*.}"
  if [ "$found_ext" != "$ext" ]; then
    log::warn "The file '$file' has a different extension than what we create"
  fi

  # Redundant error check
  if [ -z "$file" ]; then
    log::err "${FUNCNAME[0]} '$@' failed - could not come up with an answer"
    exit 1
  fi

  # return
  echo "$file"
}

function note::ensure_initialized() {
  local -r note="${1?}"

  # Exit early if the note already exists
  [ -e "$note" ] && return
  if ! touch "$note"; then
    log::err "Can't create note '$note'"
    exit 1
  fi

  echo "# $month $day, $year" > "$note"
  note::init::tasks "$note"
}

function note::init::tasks() {
  local -r note="${1?}"
  readonly task_root="${root?}/etc/tasks"

  # Append tasks to new note file
  local task taskfile
  local tasks=( "daily" "$weekday" )
  for task in "${tasks[@]}"; do
    taskfile="$task_root/$task.$ext"
    test -f "$taskfile" || continue
    cat "$taskfile" >> "$note"
  done
}

function repo::is_initialized() {
  # The repo is not initialized if the datekeeper file doesn't exist
  [ ! -f "$datekeeper_file" ] && return 1

  # The repo is not initialized if the datekeeper file doesn't show up in git
  # Directly forward the return code of this command as the return code of this function
  "${git[@]}" log -- "$(basename "$datekeeper_file")" &>/dev/null
}

function repo::ensure_initialized() {
  repo::is_initialized && return

  log::info "Initializing repo"
  set -x
  "${git[@]}" init &>/dev/null
  echo "today.$ext" > "${root?}/.gitignore"
  touch "$datekeeper_file"
  "${git[@]}" add ".gitignore" "$datekeeper_file"
  "${git[@]}" commit -m 'first commit' &>/dev/null
}

function repo::history::note() {
  # Return a notes file corresponding to the date
  note::from_date "$(repo::history::date "$@")"
}

function repo::history::date() {
  [ ! -f "$datekeeper_file" ] && return
  local -r entries_back="${1?}"
  local -r date="$(tail "-$entries_back" "$datekeeper_file" | head -1)"

  # Return the date recorded in the 'nth' spot of history
  echo "$date"
}

function repo::contains_date() {
  # Check to see if the datekeeper_file already contains the date
  local -r date="$1"
  grep -q "${date?}" "$datekeeper_file" || return 1

  # And check fit, too
  local -r note="$(note::from_date --relative "$date")"
  "${git[@]}" log -- "$note" &>/dev/null
}

function repo::register_today() {
  # If we've already registered a file for today in datekeeper, then
  # initialization is done
  local -r date_today="$year/$month/$day"
  if repo::contains_date "${date_today?}"; then
    log::info "We already have a journal entry for '$date_today'"
    return
  fi

  # Today isn't in the datekeeper file!
  # This means that we're done editing the previous notes file. Add/commit it
  local -r prev_date="$(repo::history::date 1)"
  local -r prev_note="$(note::from_date "$prev_date")"
  if [ ! -f "$prev_note" ]; then
    log::err "Could not find file for datekeeper entry '$prev_date'. Something is wrong."
    exit 1
  fi
  "${git[@]}" add "$prev_note"
  "${git[@]}" commit -m "Journal entry for $prev_date" || true

  # Create & prepopulate a notes file for today. Symlink to it, and add it to git.
  local -r note="$(repo::journal::add_date "${date_today?}")"
  local -r symlink_to_today="${root?}/today.$ext"
  ln -f -s "$note" "$symlink_to_today"
  "${git[@]}" add "$note" "$datekeeper_file"
}

function repo::journal::add_date() {
  local -r date="$1"
  local -r note="$(note::from_date "${date?}")"
  if [ -z "$note" ]; then
    log::err "note::from_date FAILED"
    exit 1
  fi
  log::info "Adding '$date' to journal - '$note'"
  mkdir -p "$(dirname "$note")" || exit 1

  # Register with datekeeper
  echo "$date" >> "$datekeeper_file"

  # Ensure the note is initialized
  note::ensure_initialized "$note"

  # Return the created note
  echo "$note"
}

function repo::journal::open() {
  pushd "${root?}" &>/dev/null || exit 1

  # Open a week of notes in buffers.
  local files_to_open=()
  for i in {1..5}; do
    files_to_open+=(
      "$(repo::history::note "$i")"
      "${files_to_open[@]}"
    )
  done

  # Use the `Notes` command to get that nice view split
  startup_cmd=(
    "1b |"
    "vsp |"
    "2b |"
    "setlocal foldlevel=1 |"
    "wincmd h"
  )
  nvim "${files_to_open[@]}" -c"${startup_cmd[*]}"

  popd &>/dev/null || exit 1
}

function main() {
  log::info "$0: Root of notes = '${root?}'"
  repo::ensure_initialized
  repo::register_today
  repo::journal::open
}
main "$@"
