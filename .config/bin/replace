#!/usr/bin/env bash

source "${XDG_CONFIG_HOME:-${HOME}/.config}/bash/plugins/log.bash"
source "${XDG_CONFIG_HOME:-${HOME}/.config}/bash/plugins/arg.bash"
NL='
'
VERS='1.0'

function usage() {
  cat << EOF
Usage: replace_string [options]

Options:
  -r, --replace <src:dst>  Replace src to dst
  -s, --src <src>          Find source code with 'src'
  -c, --codefiles          List all code files
  -h, --help               Display this help and exit
EOF
}

function codefiles() {
  local fd_args=(
    --type file
    --exclude '*.tgz'
    --exclude '*.pb.*'
    --exclude '*.lock'
  )
  fd "${fd_args[@]}"
}

function main() {
  local replacements=() findSrc
  while (( $# > 0 )); do
    case "$1" in
      -c|--codefiles) codefiles; return 0;;
      -s|--src) findSrc="$2"; shift 2;;
      -r|--replace) replacements+=("$2"); shift 2;;
      -h|--help) usage; return 0;;
      *) log::err "Unknown option: $1"; return 1;;
    esac
  done

  if [ -n "${findSrc}" ]; then
    log::info "Finding source code with '${findSrc}'"
    rg -l "${findSrc}"
    return 0
  fi

  # Make sure we're in a git repo
  if ! git rev-parse --is-inside-work-tree &> /dev/null; then
    log::err "Not a git repository"
    return 1
  fi

  # If it's empty, give a warning
  if (( ${#replacements[@]} == 0 )); then
    log::warn "No replacements specified"
    return 1
  fi

  local r src dst
  local msg="Replace v${VERS}${NL}${NL}"
  for r in "${replacements[@]}"; do
    log::info "We have r | r='${r}'"
    IFS=':' read -r src dst <<< "${r}"
    log::info "We have src | src='${src}'"
    arg::_required "src"
    arg::_required "dst"

    while IFS= read -r file; do
      log::info "Replacing for file | file='${file}'"
      sed -i '' -e "s/[[:<:]]${src}[[:>:]]/${dst}/g" "${file}"
    done < <(codefiles)

    msg+="| '${src}' -> '${dst}'${NL}"
  done

  git commit --all --message "${msg}"
  git show
}
main "$@"
