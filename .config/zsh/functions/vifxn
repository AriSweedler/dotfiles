# Edit the file that a shell function is defined in
local -r func_name="${1:?}"

local type
type="$(type "${func_name}")"

# Ensure we have a shell function
if ! grep -q "shell function" <<< "${type}"; then
  log::err "Function does not exist | func_name='${func_name}'"
  log::warn "type ${func_name}='$(type "${func_name}")'"
  return 1
fi

# Find the file our program lives in:
# * autoload (we have to search) or
# * already loaded (loaded autoload OR plugin)
local file
if grep -q "is an autoload shell function" <<< "${type}"; then
  # Search through '$fpath' to find the function and open it
  local dir
  for dir in "${fpath[@]}"; do
    [ -f "${dir}/${func_name}" ] || continue
    file="$dir/$func_name"
  done
else
  file="$(awk '{print $NF}' <<< "${type}")"
fi

# Helper function just to increase semantic meaning of code
function _is_autoload_function() {
  local file="${1:?}"
  grep -q "\/functions\/" <<< "${file}"
}

# If it's not an autoload function, then try to jump to the function definition.
# Autoloaded functions don't have 'function $func_name() {' at the top so we
# don't try to do anything for them
local editor_args=()
if ! _is_autoload_function "${file}"; then
  editor_args+=(+"/\<\zs${func_name}\ze() {$")
fi

# Finally: Open the editor
run_cmd "$EDITOR" "${editor_args[@]}" "$file"

# Clean up
unset -f _is_autoload_function
