#!/usr/bin/env bash

function prepend() {
  # If my branch is not named after a ticket, then I don't need to add anything.
  if grep -q 'EYE-' <<< "$BRANCH"; then
    log::info "Prepending EYE branch to commit message | EYE_BRANCH='$BRANCH'"
    echo "$BRANCH -"
  fi
}

function append() {
  log::info "Appending git history to commit message"

  # Add a pretty summary of git history (commented out - see the 'sed'
  # command). This helps me write commit messages sometimes.
  echo "# {{{ Git history:"
  # '%s': subject
  # '%h': abbreviated commit hash
  # '%ar': author date, relative
  # '%an': author name
  # '%d': ref names
  git log --graph -10 --pretty="format:%s:~[%h] %ar by %an;%d~" \
    | tr '~' '\n' | sed -e 's/^/# /' -e 's/ $//g'
  echo "# }}}"
}

function main() {
  if ! source "$HOME/.config/bash/plugins/log.bash" &>/dev/null; then
    function log::info { echo "[INFO] $@" >&2; }
    function log::err { echo "[ERROR] $@" >&2; }
  fi

  # https://www.atlassian.com/git/tutorials/git-hooks
  #
  # $2 is 'the type of commit.
  # * This can be message (-m or -F option)
  # * template (-t option)
  # * merge (if the commit is a merge commit)
  # * squash (if the commit is squashing other commits).'
  # * Or empty, if this is just a regular commit made from `git commit`
  #
  # We only have work to do if '$2' is empty
  if [ -n "$2" ]; then
    log::info "Skipping prepare-commit-msg script, commit_type='$2' will provide if for us"
    exit 0
  fi

  # $1 is 'the name of a temporary file that contains the message. You change the
  # commit message by altering this file in-place.'
  #
  # Add my informatoin around the pre-populated commit message.
  readonly BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  printf '%s\n%s\n%s' "$(prepend)" "$(cat $1)" "$(append)" > "$1"
}

main "$@"
