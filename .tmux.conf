############################# change default prefix ############################
# Make C-a the default tmux prefix. Hit it twice to send a literal C-a to the
# application
unbind-key C-b
set-option -g prefix C-a
bind-key C-a send-prefix
bind-key Enter send-prefix

################################### settings ###################################
# start numbering windows and panes from 1, not 0.
set-option -g base-index 1
setw -g pane-base-index 1
set-option -g focus-events on

# support 256 colors
set-option -g default-terminal "screen-256color"

# I don't use the mouse in tmux. But maybe I will later
set-option -g mouse off

# Ensure we're using bash
set-option -g default-shell "/bin/bash"

# Ensure we're using bash
set-option -g default-shell "/bin/bash"

# No more annoying self-renaming windows
set-option -g allow-rename off

# Increase number of lines in scrollback buffer
set-option -g history-limit 10000

# I don't *think* I use keys that need to be sent as an escape sequence. If I
# do, I guess I'll find out what those are and up the delay.
set-option -s escape-time 0

############################ vim-specific mappings #############################
# I found this command online, it uses a fancy regex, and it'll support gvim,
# vi, vimdiff, etc. I wanna keep it simple though. I'll add to my command if I
# need to.
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|vim?)(diff)?$"'
# A shell command that either fails or succeeds
is_vim='test "#{pane_current_command}" = "vim"'

# Just to use the 'run-shell' tmux command
bind-key C-q run-shell 'echo Currently running: #{pane_current_command}'

# Always build feedback first! This command helps debug my $is_vim script
cv_IS_vim="display-message 'This is vim'"
cv_NOT_vim="display-message 'This is not vim'"
bind-key C-v if-shell "$is_vim" $cv_IS_vim $cv_NOT_vim

########################### set vim-like key bindings ##########################
# Use (C-)?[hjkl] to navigate between panes
tmux_left="select-pane -L"
vim_left="send-keys w"
unbind-key left
bind-key left if-shell "$is_vim" $vim_left $tmux_left
bind-key h select-pane -L
bind-key C-h select-pane -L

tmux_right="select-pane -R"
vim_right="send-keys l"
unbind-key right
bind-key right if-shell "$is_vim" $vim_right $tmux_right
bind-key l select-pane -R
bind-key C-l select-pane -R

tmux_up="select-pane -U"
vim_up="send-keys k"
unbind-key up
bind-key up if-shell "$is_vim" $vim_up $tmux_up
bind-key k select-pane -U
bind-key C-k select-pane -U

tmux_down="select-pane -D"
vim_down="send-keys j"
unbind-key down
bind-key down if-shell "$is_vim" $vim_down $tmux_down
bind-key j select-pane -D
bind-key C-j select-pane -D

# Use <vs> to make a vsplit or a split (preserving current path)
bind-key v split-window -c "#{pane_current_path}" -h
bind-key s split-window -c "#{pane_current_path}" -v

# Use 't' to make a new window (It feels like a new tab to me!!)
bind-key t new-window -c "#{pane_current_path}"

# Make resizing panes easier. -r means *repeatable* (try hitting <prefix>+ then
# <prefix>+++, that's what repeatable means)
bind-key -r < resize-pane -L 3
bind-key -r > resize-pane -R 3
bind-key -r + resize-pane -U 1
bind-key -r = resize-pane -D 1

# copy-mode's workflow is, by default: [<Space><Enter>].
# But I wanna use [vy]. Entering copy-mode and pasting are the same. But
# visually selecting and "yanking" are different.
setw -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

########################## Inter-window pane movements #########################
# Place a pane in a different (but currently living) window
# The opposite of this command is 'put a split pane in a new window': <Prefix>!
bind-key J command-prompt -p "send pane to:" "join-pane -t '%%'"

##################################### Other ####################################
# Use 'c' to go into clock mode cuz we can't overwrite this CRUCIAL
# functionality. For real, tho, we don't want to accidentally do something when
# I try to close a vim windown but accidentally send the tmux command.
bind-key c clock-mode

# Use 'C-s' to read in this file's settings
bind-key C-s source-file ~/.tmux.conf \; display-message "source-file ~/.tmux.conf succeeded"

# Overwrite these commands to remove the '-I' flag that gives initial input. I
# don't want that! I just have to delete it every time :/
# TODO understand why we need to single quote '$' to use it.
bind-key . command-prompt -1 "move-window -t %1"
bind-key , command-prompt "rename-window -- '%%'"
bind-key '$' command-prompt "rename-session -- '%%'"

############################ Colors and status line ############################
set-option -g status-style fg=colour230,bold,bg=colour53

# highlight the active window in the window list
setw -g window-status-current-style bg=colour17

# Customize status line message and style. Google `man tmux "FORMATS"`
# (http://man7.org/linux/man-pages/man1/tmux.1.html#FORMATS)
# There are color directives `#[]`
# and there ternary statements: `#(?boolean,option1,option2}`
set-option -g status-left "\
#[fg=colour016]\
#[bg=colour102]\
#{?client_prefix,#[bg=brightyellow],}\
 Session: #S \
#{?#{==:#{pane_mode},"copy-mode"},#[bg=brightgreen] COPY ,}\
#{?selection_present,#[bg=brightcyan] SELECTION ,}\
"

# The syntax for nested if statements is whacky! This looks okay, though. I'm
# pretending its an "if-elseif-else" block.
set-option -g status-right "\
#{?selection_present,#[bg=brightcyan],\
#{?pane_in_mode,#[bg=brightgreen],\
#{?client_prefix,#[bg=brightyellow],\
#[bg=colour102]}}}\
#[fg=colour016] \
%a %b %d on #h at %R \
"
set-option -g status-left-length 40
set-option -g status-right-length 60
set-option -g status-justify centre

# Make pane borders prettier
setw -g pane-border-style fg=white
setw -g pane-active-border-style fg=colour17,bg=colour17

# Set the color of the active window
setw -g window-active-style fg=colour15,bg=colour235
# Dim inactive panes. So useful!
setw -g window-style fg=colour245,bg=colour236

# make messages look cool 8) I am hackerman
set-option -g message-style fg=colour28,bold,bg=colour0

############################## Future development? #############################
###################### scripts to set up a dev environment #####################
# * You can script everything that tmux can do by using primitives to send tmux
# commands or send keypresses
# EXAMPLES: "tmux command -t session-name" or
# "tmux send-keys -t myBashSession whoami C-m"
#
# Look into tmuxinator if interested. It compiles yaml into a .tmux.conf script
################################################################################

bind-key C-d new-session -Ad -s debounce ~/.local/debounce \; display-message "debounce successfully started"
