########################### change default prefix ########################## {{{
# Make C-a the default tmux prefix. Hit it twice to send a literal C-a to the
# application
unbind-key C-b
set-option -g prefix C-a
bind-key C-a send-prefix
bind-key Enter send-prefix
############################################################################ }}}
################################# settings ################################# {{{
# start numbering windows and panes from 1, not 0.
set-option -g base-index 1
set-option -g pane-base-index 1
set-option -g focus-events on

# support 256 colors
set-option -g default-terminal "screen-256color"

# I don't use the mouse in tmux. But maybe I will later
set-option -g mouse off

# Ensure we're using zsh
set-option -g default-shell "/bin/zsh"

# No more annoying self-renaming windows
set-option -g allow-rename off

# Increase number of lines in scrollback buffer
set-option -g history-limit 50000

# I don't *think* I use keys that need to be sent as an escape sequence. If I
# do, I guess I'll find out what those are and up the delay.
set-option -s escape-time 0

# Give myself 5 seconds (default is 1) to select a pane after running
# 'display-pane' (<Prefix>q by default)
set-option -g display-panes-time 5000

# Big delay allowed between repeated keypresses
# Allows you to press and hold '<' to resize
set -g repeat-time 750
############################################################################ }}}
######################### set vim-like key bindings ######################## {{{
# Use <vs> to make a vsplit or a split (preserving current path)
bind-key v split-window -c "#{pane_current_path}" -h
bind-key s split-window -c "#{pane_current_path}" -v

# Use 't' to make a new window (It feels like a new tab to me!!)
bind-key t new-window -c "#{pane_current_path}"

# Make resizing panes easier. -r means *repeatable*
bind-key -r < resize-pane -L 3
bind-key -r > resize-pane -R 3
bind-key -r + resize-pane -U 1
bind-key -r = resize-pane -D 1

# copy-mode's workflow is, by default: [<Space><Enter>].
# But I wanna use [vy]. Entering copy-mode and pasting are the same. But
# visually selecting and "yanking" are different.
# Also put what we've yanked to the clipboard
set-option -g mode-keys vi
set-option -g status-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe pbcopy\; send-keys -X copy-selection-and-cancel
############################################################################ }}}
############################# Other keybindings ############################ {{{
# Place a pane in a different (but currently living) window
# The opposite of this command is 'put a split pane in a new window': <Prefix>!
bind-key J command-prompt -p "send pane to:" "join-pane -t '%%'"

# `!` will do the opposite of `J`. Break a pane out into a new window

# TODO Commands to remember cuz they're right:
# <Prefix>w ==> choose-tree -Zw
# <Prefix>z ==> zoom pane (repeat to unzoom)
# <Prefix>x ==> kill pane
# <Prefix>& ==> kill window

# Pane number stuff:
# <Prefix>q ==> display-pane
# <Prefix>{} ==> swap-pane

# Overwrite these commands to remove the '-I' flag that gives initial input. I
# don't want that! I just have to delete it every time :/
bind-key . command-prompt -1 "move-window -t %1"
bind-key , command-prompt "rename-window -- '%%'"
bind-key $ command-prompt "rename-session -- '%%'"

# Use 'C-s' to read in this file's settings
bind-key C-s source-file ~/.tmux.conf \; display-message "source-file ~/.tmux.conf succeeded"

# Use 'c' to go into clock mode. (It used to be, `t` for time)
bind-key c clock-mode

# I don't want these to be repeatable
bind-key Up select-pane -U
bind-key Down select-pane -D
bind-key Left select-pane -L
bind-key Right select-pane -R

# Toggle pane synchronization
bind-key S set-window-option -g synchronize-panes
############################################################################ }}}
################################## colors ################################## {{{
##################################### theme ################################ {{{
# Foreground and background of the statusline
fgs=colour16
bgs=colour245
bgs_highlight=colour25
bgs_highlight_2=colour240

# Pretty colors for foreground and background of statusline modes
fgsm_active=colour252
bgsm_active=colour92
bgsm_select=colour3
bgsm_zoom=colour30
bgsm_copy=colour22

# Save some typing.
sm_active="#{?client_prefix,\
#[fg=${fgsm_active}]#[bg=${bgsm_active}],\
#[fg=${fgs}]#[bg=${bgs}]}"
############################################################################ }}}
################################ status line ############################### {{{
bgs_base=colour237
fgs_base=colour230,bold
set-option -g status-style fg=${fgs_base},bg=${bgs_base}
################################### left ################################### {{{
# Customize status line message and style. Google `man tmux "FORMATS"`
# (http://man7.org/linux/man-pages/man1/tmux.1.html#FORMATS)
# There are style directives `#[]`
# and there ternary statements: `#(?boolean,option1,option2}`
set-option -g status-left-length 40
set-option -g status-left "\
${sm_active}\
 Session: #S \
#{?window_zoomed_flag,#[bg=${bgsm_zoom}] (Z) ,}\
#{?#{==:#{pane_mode},"copy-mode"},#[bg=${bgsm_copy}] COPY ,}\
#{?selection_present,#[bg=${bgsm_select}] SELECTION ,}\
"
############################################################################ }}}
################################## center ################################## {{{
# Put the window list in the center
set-option -g status-justify centre

# Set the style for windows in the window list
set-option -g window-status-format '#{?client_prefix,#[underscore],} #I: #W '
set-option -g window-status-current-format '#{?client_prefix,#[underscore],} #I: #W :) '

# highlight the active and last windows
set-option -g window-status-current-style bg=${bgs_highlight}
set-option -g window-status-last-style bg=${bgs_highlight_2}
############################################################################ }}}
################################### right ################################## {{{
# The syntax for nested if statements is whacky! This looks okay, though. I'm
# pretending its an "if-elseif-else" block. We use this early-exiting if-elif
# check to choose a color {{{
set-option -g status-right-length 60
set-option -g status-right "\
${sm_active}\
#{?window_zoomed_flag,#[bg=${bgsm_zoom}] (Z) ,}\
#{?selection_present,#[bg=${bgsm_select}],\
#{?pane_in_mode,#[bg=${bgsm_copy}],\
#{?client_prefix,#[bg=${bgsm_active}],\
#[bg=${bgs}]}}} \
%a %b %d on #h at %I:%M%p\
"
############################################################################ }}}
############################################################################ }}}
################################## borders ################################# {{{
# Make pane borders prettier. I don't like having a pane-border-format
border_inactive=white
border_active=colour22
set-option -g pane-border-style fg=${border_inactive}
set-option -g pane-active-border-style fg=${border_active},bg=${border_active}
############################################################################ }}}
################################### panes ################################## {{{
# Set the color of the active window. And dim inactive panes. So useful!
fg_active_window=colour15
bg_active_window=colour235
fg_inactive_window=colour245
bg_inactive_window=colour236
set-option -g window-active-style fg=${fg_active_window},bg=${bg_active_window}
set-option -g window-style fg=${fg_inactive_window},bg=${bg_inactive_window}
############################################################################ }}}
################################# messages ################################# {{{
# make messages look cool 8) #wannabeHackerman
fg_system=colour28,bold
bg_system=colour0
set-option -g message-style fg=${fg_system},bg=${bg_system}
############################################################################ }}}
############################################################################ }}}
################################## Macros ################################## {{{
bind-key C-c new-window -n "caffeinate" "echo 'Display will not sleep'; caffeinate -d"\; display-message "caffeinate successfully started"

# Control-p is for key forwarding
bind-key C-p new-window 'applepaste $(pbpaste)'
############################################################################ }}}
